import asyncio
import json
import os
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from collections import defaultdict

TOKEN = os.getenv("TOKEN")

DATA_FILE = "trash.json"

def load_data():
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, "r") as f:
            return defaultdict(int, json.load(f))
    return defaultdict(int)

def save_data(data):
    with open(DATA_FILE, "w") as f:
        json.dump(data, f)

trash_counts = load_data()

bot = Bot(token=TOKEN)
dp = Dispatcher()

# –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_main_keyboard():
    builder = ReplyKeyboardBuilder()
    builder.button(text="üóë –í—ã–Ω–µ—Å –º—É—Å–æ—Ä")
    builder.button(text="üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
    builder.adjust(2)
    return builder.as_markup(resize_keyboard=True)

@dp.message(Command("start"))
async def start(message: Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –ù–∞–∂–∏–º–∞–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ:",
        reply_markup=get_main_keyboard()
    )

@dp.message(lambda msg: msg.text == "üóë –í—ã–Ω–µ—Å –º—É—Å–æ—Ä")
async def handle_trash(message: Message):
    user = message.from_user.first_name
    trash_counts[user] += 1
    save_data(trash_counts)
    await message.answer(f"{user}, —Ç—ã –≤—ã–Ω–µ—Å –º—É—Å–æ—Ä {trash_counts[user]} —Ä–∞–∑(–∞)!")

@dp.message(lambda msg: msg.text == "üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
async def stats(message: Message):
    if not trash_counts:
        await message.answer("–ï—â—ë –Ω–∏–∫—Ç–æ –Ω–µ –≤—ã–Ω–æ—Å–∏–ª –º—É—Å–æ—Ä.")
        return
    stats_text = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–Ω–æ—Å–∞ –º—É—Å–æ—Ä–∞:\n"
    for user, count in sorted(trash_counts.items(), key=lambda x: -x[1]):
        stats_text += f"‚Ä¢ {user}: {count}\n"
    await message.answer(stats_text)

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
